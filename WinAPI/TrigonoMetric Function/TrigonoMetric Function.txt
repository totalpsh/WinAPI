▶ 삼각함수란?

- 수학에서의 삼각함수는 직각 삼각형의 각을 직각 삼각형 번들의 길이 비로 나타내는 함수이다. ->  직각 삼각형일 때만 성립이 된다.

- 게임 개발을 하는 관점에서는 주로 각도를 이용할 때 삼각함수가 필요하다.
	ㄴ 발사체의 각도, 캐릭터의 대각선 이동 / 스킬의 범위 설정 등(부채꼴)
	ㄴ 더 나아가면 파동 규칙을 통해 일정한 루틴을 만들거나 힘/ 물리 연산도 가능하다.
		ㄴ 가능한 선에서

▷ 삼각함수 하면 기억할 세가지

- 빗변 : l					-> 대변(높이) : H				-> 밑변 : b

1. 사인 (sin)
ㄴ 사인은 빗변과 높이의 비율을 구해주는 함수
ㄴ sinΘ  =  대변 /빗변 = h / l

2. 코사인
ㄴ 코사인은 밑변의 비율을 계산해 주는 함수
ㄴ cosΘ = 및변 / 빗변 = b / l

3. 탄젠트
ㄴ 직각 삼각형에서 어떠한 각도를 넣었을 때 밑변과 대변의 비율을 구해준다.
ㄴ tan(45도) = 1
ㄴ tanΘ = 대변 / 밑변 = h / b

▶ 프로그래밍에서의 삼각함수

-api는 윈도우 좌표계를 사용한다.

- 윈도우 좌표계는 데카르트 좌표계와는 달리 y축이 아래로 갈수록 증감이 되기 때문에 y좌표를 구할 떄 처리를 하지 않았다면 sin옆에 '-'기호를 붙여야 한다.

ㆍ 기억해야할 개념

 - PI
 ㄴ 원주 (원의둘레)와 지름(원의 중심을 관통해서 원의 한쪽 긑에서 반대쪽 끝까지 가로지르는 선)의 길이를 비로 나타낸다.

 - 호도법
 ㄴ 각도를 나타내는 표현 방법중에 하나=> 호의 길이로 각도를 표기하는 표기법
 ㄴ PI 를 사용해 180도 각도를 표시하는 것
 ㄴ 호도법을 사용해야 하는 이유는 컴퓨터는 각도를 인식할 때 도를 사용할 수 없다.
 ㄴ 반지름의 길이와 같은 호에 대한 중심각을 1호도(라디안)이라고 한다.

 - 라디안
 ㄴ 호도 법을 표기할 떄 사용하는 단위
 ㄴ반지름과 호의 길이가 같은 값을 1라디안이라고 정의 한다.
 ㄴ 1라디안 = 57.3 도

 - 도
 ㄴ 일반적으로 사용하는 각의 단위(각도)
 ㄴ 도수법 / 각도 표기라고 불린다.
 ㄴ 한바퀴를 360도로 정의한다.


 - 60분법
 ㄴ 원의 둘레를 360등분하여 각의 크기를 나타내는 방법
 ㄴ PI(원주율) : 3.14
 ㄴ 원의 둘레 : 2 * PI * 반지름
 ㄴ 원의 넓이 : 반지름 * 반지름 * PI



 게임에서 60분법? 무언가를 찾는다는 것을 의미
 하지만 원을 통해서 무언가 하는것은 최대한 지양해야 한다.


 ★ PI의 라디안 값은 -> 180도

 - 그렇기 때문에 공식이 성립할 수 있다.

	- Degree
	ㄴ180 도  =   PI 라디안
	ㄴ1도 = PI / 180 라디안
	ㄴx도 = x * PI / 180 라디안

	- Radian
	ㄴ PI라디안 = 180도
	ㄴ I 라디안  = 180/PI 도
	ㄴ x 라디안 = x* 180 / PI 도

 ※ 부채꼴 모양엥서는 반지름, 호, 중심각 중에 2가지만 알수 있으면 다른 1가지도 구할 수 있다.

 ▷ 기본 공식 
 1. 두점 사이의 거리
 ㄴ 두점을 안다 . (Start/End) -> 서로의 거리를 안다 -> 목표지점에서 시작점을 뺀다.
 ㄴ End - Start = 두점 사이의 거리 -> 뺸 만큼의 차

 ㄴ 위의 공식으로 각점(x, y) 사이의 델타량을 구한다.
	ㄴ DeltaX, DeltaY

 2. 대각선(빗변)의 거리
 ㄴ Distance(빗변) = sqrt(DeltaX * DeltaX + DeltaY * DeltaY)
	ㄴ ◈ sqrt : 제곱근을 구하기 위한 함수

 3. 각을 구한다. (이것도 기본적으로 공식을 활용하자)

 - float angle = acos (DeltaX / Distance);
	ㄴ 삼각함수 : 각도를 넣어서 각도 계산
	ㄴ 역삼각함수 : 삼각함수의 결과값을 통해 각도 를 계산한다.
		ㄴ 일반적으로 삼각함수 앞에 arc/ a로 표기
		ㄴ 플레이어-> 삼각함수 / 적-> 역삼각

 - 각도에 대한 변이량을 구한다.
	ㄴ float DeltaX = cos(라디안) * Distance(이동량);
	ㄴ float DeltaY = -sin(라디안) * Distance(이동량);

 4. x 축 좌표 구하기
 ㄴ x = cos(각도 * PI / 180) * 거리(속도);

 5. y축 좌표 구하기
 ㄴ y = -sin(각도 * PI / 180) * 거리(속도);